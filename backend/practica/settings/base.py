"""
Django settings for practica project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR is equal to ${PROJECT_DIR}/backend
from django.utils.crypto import get_random_string
from django.utils.encoding import force_str
from django.utils.text import slugify

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Application definition - order is significant!
# When several applications provide different versions of the same resource
# (template, static file, management command, translation),
# the application listed first in INSTALLED_APPS has precedence.
INSTALLED_APPS = [
    'internships',
    'faq',
    'users',
    'students',

    'readonlyadmin',

    'graphene_django',
    'ckeditor',
    'ckeditor_uploader',
    'reversion',
    'reversion_compare',
    'imagekit',
    'ordered_model',
    'phonenumber_field',
    'import_export',
    'admin_reorder',

    'allauth',
    'allauth.account',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'users.middleware.TokenMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'readonlyadmin.middleware.AdminLocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'practica.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'practica/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'practica.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en'
ADMIN_LANGUAGE_CODE = 'en'
LANGUAGES = (
    ('ro', 'Română'),
    ('en-us', 'English'),
)

TIME_ZONE = 'Europe/Bucharest'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, '..', 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'practica/static')
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, '..', 'media')

PRIVATE_STORAGE_ROOT = os.path.join(BASE_DIR, '..', 'media', 'private')
PRIVATE_STORAGE_AUTH_FUNCTION = 'private_storage.permissions.allow_staff'

IMAGEKIT_CACHEFILE_DIR = 'imagekit'

CKEDITOR_UPLOAD_PATH = "admin/uploads/"
CKEDITOR_IMAGE_BACKEND = 'pillow'
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
    },
}

FILE_UPLOAD_PERMISSIONS = 0o640

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'locmem-default',
    },

    'session': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'locmem-session',
    }
}

MEMCACHED_URL = os.getenv('MEMCACHED_URL', None)

if MEMCACHED_URL:
    memcached_cache = {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': MEMCACHED_URL,
        'KEY_PREFIX': slugify(os.getenv('EXTERNAL_URL', get_random_string(30)))[:30],
    }
    CACHES['default'] = dict(memcached_cache)
    CACHES['session'] = dict(memcached_cache)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'pipe_separated': {
            'format': '%(asctime)s | %(levelname)s | %(name)s | %(message)s'
        }
    },
    'handlers': {
        'debug_log': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR + '/logs/debug.log',
            'formatter': 'pipe_separated',
            'encoding': 'utf-8',
        },
        'sql_log': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR + '/logs/sql.log',
            'formatter': 'pipe_separated',
            'encoding': 'utf-8',
        },
        'console_log': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': 'ext://sys.stdout',
            'formatter': 'pipe_separated',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['debug_log', 'console_log'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.template': {
            'handlers': ['debug_log', 'console_log'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['sql_log'],
            'propagate': False,
        },
    },
}

GRAPHENE = {
    'SCHEMA': 'practica.schema.schema',
    'MIDDLEWARE': (
        'practica.schema.RelayIDMiddleware',
    )
}

USE_X_FORWARDED_PORT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ADD_REVERSION_ADMIN = True

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    # regular django auth for admin panel
    'django.contrib.auth.backends.ModelBackend',
    # authentication via Authorization header token
    'users.backends.TokenBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# django.contrib.sites is required by allauth
SITE_ID = 1
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USER_DISPLAY = force_str
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
# disabling HMAC for e-mail confirmation tokens (switching to db state) is necessary for the cooldown to work
ACCOUNT_EMAIL_CONFIRMATION_HMAC = False
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 180

PHONENUMBER_DEFAULT_REGION = 'RO'

IMPORT_EXPORT_USE_TRANSACTIONS = True

APPLICANT_EXPORT_TIMEOUT_DAYS = 60

ADMIN_REORDER = (
    {
        'app': 'users', 'label': 'Students',
        'models': (
            'users.StudentClass',
            'users.StudentPrefill',
            'students.StudentProfile',
            'students.LigaAcLabsLab'
        )
    },
    'internships',
    'faq',

    {
        'app': 'auth',
        'models': (
            'auth.Group',
            'users.User'
        )
    },
    'account',
    'socialaccount'
)

if ADMIN_REORDER:
    MIDDLEWARE.append('admin_reorder.middleware.ModelAdminReorder')
